{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Tech","props","state","technologies","name","logo","url","this","forEach","item","fetch","then","data","json","res","console","log","release","setState","className","id","map","style","backgroundImage","viewBox","cx","cy","r","fill","strokeWidth","target","rel","href","src","alt","React","Component","App","role","aria-label","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c8675bf6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass Tech extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      technologies: [\n        { name: 'React', logo: '/logo/react.png', \n          url: 'facebook/react/'},\n        { name: 'Angular', logo: '/logo/angular.svg', \n          url: 'angular/angular/' },\n        { name: 'Ionic Framework', logo: '/logo/ionic.png', \n          url: 'ionic-team/ionic/' },\n        { name: 'Django Framework', logo: '/logo/django.png', \n          url: 'django/django/' }\n      ]\n    };\n  }\n  \n  componentDidMount() {\n    // https://api.github.com/repos/angular/angular/tags\n    // this.setState({\n    //   technologies\n    // });\n\n    this.state.technologies.forEach((item: any) => {\n      fetch('https://api.github.com/repos/' + item.url + 'tags')\n      .then(data => data.json())\n      .then(res => {\n        console.log(res);\n        item.release = res[0].name;\n        this.setState({technologies: this.state.technologies});\n      });\n    });\n    // this.setState({technologies: this.state.technologies});\n  }\n\n  render () {\n    const technologies = this.state.technologies;\n    return (\n      <div className=\"Tech\" id=\"Tech\">\n          <div className=\"technologies\">\n              {\n                technologies.map((item: any) =>\n                  <div className=\"item\" key={item.name}>\n                    <div className=\"image\" style={{backgroundImage: 'url(' + item.logo + ')'}}></div>\n                    <div className=\"label\">\n                      <div className=\"title\">{item.name}</div>\n                      <div className=\"status\">\n                        <div className=\"dot\"></div>\n                        Release: {item.release ? item.release :\n                          <svg className=\"spinner\" viewBox=\"0 0 50 50\">\n                            <circle className=\"path\" cx=\"25\" cy=\"25\" r=\"20\" \n                                    fill=\"none\" strokeWidth=\"5\"></circle>\n                          </svg>\n                        }\n                        {/* <span className=\"date\">(1 day ago)</span> */}\n                      </div>\n                    </div>\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" \n                        href={'https://github.com/' + item.url} className=\"linked\">\n                      <img src=\"/link.svg\" alt=\"icon\" />\n                    </a>\n                  </div>\n                )\n              }\n          </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"About\">\n          <div className=\"avatar\">\n            <img alt=\"Roman Antonov\" className=\"avatar\" src=\"/avatar.png\"/>\n          </div>\n          <div className=\"text\">  \n            <h1>Roman Antonov</h1>\n            <h2>Modern Software developing</h2>\n            <h3>\n              <a href=\"https://github.com/roman-rr/\" \n                rel=\"noopener noreferrer\" \n                target=\"_blank\">\n                Github projects\n              </a>\n            </h3>\n            {/* <h3>\n              <a href=\"https://www.upwork.com/signup/create-account/client_contact_freelancer?ciphertext=~016b923b0158ef81ae&BYOC\"\n                target=\"_blank\" \n                rel=\"noopener noreferrer\">\n                Hire me\n              </a>\n            </h3> */}\n            <h4>romwtb@gmail.com</h4>\n          </div>\n        </div>\n        \n        <Tech />\n\n        <div id=\"Popular\">\n          <span role=\"img\" aria-label=\"triumph\">üèÜ</span> Most popular services\n          <br />\n          <ul>\n            <li>Free consulting</li>\n            <li>User Interfaces</li>\n            <li>Cloud architecture</li>\n            <li>Code assessment and review</li>\n            <li>Real estate property management system, sync with airbnb</li>\n            <li>Parsing data: Alibaba products, Real Estate properties </li>\n            <li>People activity emulations</li>\n            <li>Push notifications for Web/Mobile applications</li>\n            <li>Hybrid application for Web/iOS/Android</li>\n            <li>Facebook messenger chat bot</li>\n            <li>Sketch to latest Angular / Ionic</li>\n            <li>Migrate to latest Angular / Ionic</li>\n          </ul>\n        </div>\n        <div id=\"Solutions\">\n          <span role=\"img\" aria-label=\"triumph\">üìÅ</span> Ready solutions cases\n          <br />\n          <ul>\n            <li><a href=\"https://github.com/roman-rr/cupertino-pane/\" \n                rel=\"noopener noreferrer\" \n                target=\"_blank\">Cupertino-Panes</a></li>\n            <li>Pharmacy mobile application (iOS, Android)</li>\n            <li>Real estate development (Web, iOS, Android)</li>\n            <li>Beauty salons mobile application (Web, iOS, Android)</li>\n            <li>Tinder-style card swipe application (iOS, Android)</li>\n          </ul>\n        </div>\n\n        <div id=\"Payments\">\n          Payment accesabilities: For long-term colloboration i able to recieve payments and tacking my working time with modern software such as upwork.com and hubstaff.com\n          Fixed price deals can be covered by paypal transfers or swift transfer services.\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}