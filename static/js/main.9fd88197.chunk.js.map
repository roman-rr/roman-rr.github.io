{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Tech","props","state","categories","technologies","currentCategory","active_item","chooseCategory","bind","This","this","fetch","then","response","json","items","i","length","push","setState","catch","error","console","log","id","className","map","category","onClick","key","undefined","title","technology","src","img","alt","React","Component","App","href","rel","target","role","aria-label","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9fd88197.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass Tech extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {categories: [], technologies: [], currentCategory: 0, active_item: []};\n    //handle Clicks\n    this.chooseCategory = this.chooseCategory.bind(this);\n  }\n  \n  componentDidMount() {\n    var This = this\n    fetch('technologies.json').then(function(response) {\n      return response.json();\n    }).then(function(json){\n       let items = []\n       for (var i = 0; i < json.categories.length; i ++) {\n         items.push(false)\n       }\n       items[0] = true\n       This.setState({'categories':json.categories,'technologies':json.technologies, active_item: items});\n    }).catch(function(error) {\n      console.log('parsing failed', error)\n    })\n  }\n\n  chooseCategory(id: number) {\n    let items = []\n    for (var i = 0; i < this.state.active_item.length; i ++) {\n      items.push(false)\n    }\n    items[id] = true\n    this.setState({currentCategory:id, active_item:items})\n  }\n\n  render () {\n    const categories = this.state.categories;\n    const technologies = this.state.technologies;\n    return (\n      <div className=\"Tech\">\n          <div className=\"Categories\">\n            {\n              categories.map((category: any) =>\n              <div onClick={() => this.chooseCategory(category.id)} \n                   className=\"category\" \n                   key={category.id}>\n                <span className={this.state.active_item[category.id] ? 'active': undefined} >\n                  {category.title}\n                </span>\n              </div>)\n            }\n          </div>\n          <div className=\"Technologies\">\n              {\n                technologies.map((technology: any) =>\n                (technology.category === this.state.currentCategory) ? (\n                <div className=\"Technology\" key={technology.title}>\n                  <div className=\"tech-image\">\n                    <img src={technology.img} alt=\"\"/>\n                  </div>\n                  <div className=\"title\">\n                    {technology.title}\n                  </div>\n                </div>):null)\n                \n              }\n          </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"About\">\n          <div className=\"avatar\">\n            <img alt=\"Roman Antonov\" className=\"avatar\" src=\"/avatar.jpeg\"/>\n          </div>\n          <div className=\"text\">  \n            <h1>Roman Antonov</h1>\n            <h2>Modern Software developing</h2>\n            <h3>\n              <a href=\"https://www.upwork.com/freelancers/~016b923b0158ef81ae\" \n                rel=\"noopener noreferrer\" \n                target=\"_blank\">\n                Upwork Top Rated\n              </a>\n            </h3>\n            <h3>\n              <a href=\"https://www.upwork.com/signup/create-account/client_contact_freelancer?ciphertext=~016b923b0158ef81ae&BYOC\"\n                target=\"_blank\" \n                rel=\"noopener noreferrer\">\n                Hire me\n              </a>\n            </h3>\n            <h4>romwtb@gmail.com</h4>\n          </div>\n        </div>\n        \n        <Tech />\n\n        <div id=\"Popular\">\n          <span role=\"img\" aria-label=\"triumph\">üèÜ</span> Most popular services\n          <br />\n          <ul>\n            <li>Free consulting</li>\n            <li>Facebook messenger chat bot</li>\n            <li>Build cloud server architecture</li>\n            <li>Code assessment and review</li>\n            <li>Real estate property management system, sync with airbnb</li>\n            <li>Parsing data: Alibaba products, Real Estate properties </li>\n            <li>People activity emulations</li>\n            <li>Push notifications for Web/Mobile applications</li>\n            <li>Hybrid application for Web/iOS/Android</li>\n            <li>Sketch to latest Angular / Ionic</li>\n            <li>Migrate to latest Angular / Ionic</li>\n          </ul>\n        </div>\n        <div id=\"Solutions\">\n          <span role=\"img\" aria-label=\"triumph\">üìÅ</span> Ready solutions cases\n          <br />\n          <ul>\n            <li>Pharmacy mobile application (iOS, Android)</li>\n            <li>Real estate development (Web, iOS, Android)</li>\n            <li>Beauty salons mobile application (Web, iOS, Android)</li>\n            <li>Tinder-style card swipe application (iOS, Android)</li>\n          </ul>\n        </div>\n\n        <div id=\"Payments\">\n          Payment accesabilities: For long-term colloboration i able to recieve payments and tacking my working time with modern software such as upwork.com and hubstaff.com\n          Fixed price deals can be covered by paypal transfers or swift transfer services.\n        </div>\n\n        <div id=\"Contacts\">\n          E-mail : romwtb@gmail.com\n          <br />\n          Skype: romwtb@gmail.com\n          <br />\n          Upwork: <a href=\"https://www.upwork.com/freelancers/~016b923b0158ef81ae\" \n                     rel=\"noopener noreferrer\"\n                     target=\"_blank\">\n                     https://upwork.com/fl/romanantonov\n                  </a>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}